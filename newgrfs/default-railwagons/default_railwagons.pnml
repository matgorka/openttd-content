#define FORLOOP(MACRO) \
  MACRO(27)            \
  MACRO(28)            \
  MACRO(29)            \
  MACRO(30)            \
  MACRO(31)            \
  MACRO(32)            \
  MACRO(33)            \
  MACRO(34)            \
  MACRO(35)            \
  MACRO(36)            \
  MACRO(37)            \
  MACRO(38)            \
  MACRO(39)            \
  MACRO(40)            \
  MACRO(41)            \
  MACRO(42)            \
  MACRO(43)            \
  MACRO(44)            \
  MACRO(45)            \
  MACRO(46)            \
  MACRO(47)            \
  MACRO(48)            \
  MACRO(49)            \
  MACRO(50)            \
  MACRO(51)            \
  MACRO(52)            \
  MACRO(53)            \
  MACRO(57)            \
  MACRO(58)            \
  MACRO(59)            \
  MACRO(60)            \
  MACRO(61)            \
  MACRO(62)            \
  MACRO(63)            \
  MACRO(64)            \
  MACRO(65)            \
  MACRO(66)            \
  MACRO(67)            \
  MACRO(68)            \
  MACRO(69)            \
  MACRO(70)            \
  MACRO(71)            \
  MACRO(72)            \
  MACRO(73)            \
  MACRO(74)            \
  MACRO(75)            \
  MACRO(76)            \
  MACRO(77)            \
  MACRO(78)            \
  MACRO(79)            \
  MACRO(80)            \
  MACRO(81)            \
  MACRO(82)            \
  MACRO(83)            \
  MACRO(89)            \
  MACRO(90)            \
  MACRO(91)            \
  MACRO(92)            \
  MACRO(93)            \
  MACRO(94)            \
  MACRO(95)            \
  MACRO(96)            \
  MACRO(97)            \
  MACRO(98)            \
  MACRO(99)            \
  MACRO(100)           \
  MACRO(101)           \
  MACRO(102)           \
  MACRO(103)           \
  MACRO(104)           \
  MACRO(105)           \
  MACRO(106)           \
  MACRO(107)           \
  MACRO(108)           \
  MACRO(109)           \
  MACRO(110)           \
  MACRO(111)           \
  MACRO(112)           \
  MACRO(113)           \
  MACRO(114)           \
  MACRO(115)

#define __MARK(I)             item (FEAT_TRAINS, x##I, I) {}
#define __ARR(I)              x##I,
#define MARK_WAGONS_TO_SORT() FORLOOP(__MARK)
#define WAGONS_ARRAY()        [ FORLOOP(__ARR) ]

#define APPLY_TO_ALL_RAILS(NMLID, INGAMEID, PROPERTIES) \
item (FEAT_TRAINS, rail_##NMLID, INGAMEID) {            \
  property PROPERTIES                                   \
}                                                       \
                                                        \
item (FEAT_TRAINS, monorail_##NMLID, INGAMEID + 30) {   \
  property PROPERTIES                                   \
}                                                       \
                                                        \
item (FEAT_TRAINS, maglev_##NMLID, INGAMEID + 62) {     \
  property PROPERTIES                                   \
}

#define DISABLE_ON_ALL_RAILS(INGAMEID)    \
disable_item(FEAT_TRAINS, INGAMEID);      \
disable_item(FEAT_TRAINS, INGAMEID + 30); \
disable_item(FEAT_TRAINS, INGAMEID + 62); \

#define __BOOL(N, FLAG, NAME, DESC, DEF_VALUE) \
param N {                                      \
  FLAG {                                       \
    name: string(STR_PARAM_NAME_##NAME);       \
    desc: string(STR_PARAM_DESC_##DESC);       \
    type: bool;                                \
    bit: 0;                                    \
    def_value: DEF_VALUE;                      \
  }                                            \
}

#define BOOL(N, FLAG, NAME, DEF_VALUE) \
  __BOOL(N, FLAG, NAME, NAME, DEF_VALUE)

#define CARGOBOOL(N, FLAG, NAME, DEF_VALUE) \
  __BOOL(N, FLAG, NAME##_CARGO, CARGO, DEF_VALUE)


grf {
  grfid: "\01\16M\00";
  name: string(STR_GRF_NAME);
  desc: string(STR_GRF_DESC);
  url: string(STR_GRF_URL);
  version: 1;
  min_compatible_version: 0;

  BOOL(0, isBugFixOn, BUGFIX, 1)

  param 1 {
    isFoodAndFruitSeparate {
      name: string(STR_PARAM_NAME_SEPARATE);
      desc: string(STR_PARAM_DESC_SEPARATE);
      type: int;
      min_value: 0;
      max_value: 2;
      def_value: 1;
      names: {
        0: string(STR_PARAM_REEFER_DEFAULT);
        1: string(STR_PARAM_SEPARATE);
        2: string(STR_PARAM_SINGLE_WAGON);
      };
    }
  }

  BOOL(2, isRenameOn, RENAME, 0)
  CARGOBOOL(3, isPassengersCargoOn, PASSENGERS, 1)
  CARGOBOOL(4, isMailCargoOn, MAIL, 1)
  CARGOBOOL(5, isValuablesCargoOn, VALUABLES, 1)
  CARGOBOOL(6, isGoldCargoOn, GOLD, 1)
  CARGOBOOL(7, isDiamondsCargoOn, DIAMONDS, 1)
  CARGOBOOL(8, isCoalCargoOn, COAL, 1)
  CARGOBOOL(9, isCopperCargoOn, COPPER_ORE, 1)
  CARGOBOOL(10, isIronCargoOn, IRON_ORE, 1)
  CARGOBOOL(11, isSteelCargoOn, STEEL, 1)
  CARGOBOOL(12, isPaperCargoOn, PAPER, 1)
  CARGOBOOL(13, isWoodCargoOn, WOOD, 1)
  CARGOBOOL(14, isGoodsCargoOn, GOODS, 1)
  CARGOBOOL(15, isOilCargoOn, OIL, 1)
  CARGOBOOL(16, isRubberCargoOn, RUBBER, 1)
  CARGOBOOL(17, isWaterCargoOn, WATER, 1)
  CARGOBOOL(18, isFoodCargoOn, FOOD, 1)
  CARGOBOOL(19, isFruitCargoOn, FRUIT, 1)
  CARGOBOOL(20, isGrainCargoOn, GRAIN, 1)
  CARGOBOOL(21, isLivestockCargoOn, LIVESTOCK, 1)
}

if (grf_future_status("OG+1")) {
  error(ERROR, string(STR_ERR_OGPT));
}

if (climate != CLIMATE_TOYLAND) {
  if (isBugFixOn) {
    if (climate == CLIMATE_TEMPERATE) {
      APPLY_TO_ALL_RAILS(food, 38, {
        climates_available: ALL_CLIMATES;
        default_cargo_type: 0x0B;
      })

      APPLY_TO_ALL_RAILS(fruit, 42, {
        climates_available: ALL_CLIMATES;
        default_cargo_type: 0x0E;
      })
    } else {
      if (climate == CLIMATE_ARCTIC) {
        APPLY_TO_ALL_RAILS(coal, 29, {
          refittable_cargo_classes: bitmask(CC_BULK);
          cargo_disallow_refit:     [ 0x06 ];
        })
      } else {
        APPLY_TO_ALL_RAILS(copper, 40, {
          refittable_cargo_classes: bitmask(CC_BULK);
          cargo_disallow_refit:     [ 0x06 ];
        })
      }

      APPLY_TO_ALL_RAILS(grain, 33, {
        default_cargo_type: 0x06;
      })
    }
  }

  if (climate == CLIMATE_ARCTIC && isFoodAndFruitSeparate == 1) {
    APPLY_TO_ALL_RAILS(food, 38, {
      cargo_disallow_refit: [ 0x0E ];
    })

    APPLY_TO_ALL_RAILS(fruit, 42, {
      climates_available: ALL_CLIMATES;
      default_cargo_type: 0x0E;
    })
  } else if (climate != CLIMATE_ARCTIC && isFoodAndFruitSeparate == 2) {
    APPLY_TO_ALL_RAILS(food, 38, {
      refittable_cargo_classes: bitmask(CC_REFRIGERATED);
    })

    // disable fruit wagons
    DISABLE_ON_ALL_RAILS(42)
  }

  if (isRenameOn) {
    APPLY_TO_ALL_RAILS(food, 38, {
      name: string(STR_WAGON_NAME_REFRIGERATOR_VAN);
    })
  }

  MARK_WAGONS_TO_SORT()
  sort(FEAT_TRAINS, WAGONS_ARRAY());
}
