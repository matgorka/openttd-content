#define __FORLOOP(MACRO, J, ARG) \
  MACRO(27, J, ARG)              \
  MACRO(28, J, ARG)              \
  MACRO(29, J, ARG)              \
  MACRO(30, J, ARG)              \
  MACRO(31, J, ARG)              \
  MACRO(32, J, ARG)              \
  MACRO(33, J, ARG)              \
  MACRO(34, J, ARG)              \
  MACRO(35, J, ARG)              \
  MACRO(36, J, ARG)              \
  MACRO(37, J, ARG)              \
  MACRO(38, J, ARG)              \
  MACRO(39, J, ARG)              \
  MACRO(40, J, ARG)              \
  MACRO(41, J, ARG)              \
  MACRO(42, J, ARG)              \
  MACRO(43, J, ARG)              \
  MACRO(44, J, ARG)              \
  MACRO(45, J, ARG)              \
  MACRO(46, J, ARG)              \
  MACRO(47, J, ARG)              \
  MACRO(48, J, ARG)              \
  MACRO(49, J, ARG)              \
  MACRO(50, J, ARG)              \
  MACRO(51, J, ARG)              \
  MACRO(52, J, ARG)              \
  MACRO(53, J, ARG)

#define BIGLOOP(MACRO, ARG)  \
  __FORLOOP(MACRO, 0, ARG)   \
  __FORLOOP(MACRO, 30, ARG)  \
  __FORLOOP(MACRO, 62, ARG)  \

#define SMALLLOOP(MACRO, ARG) \
  __FORLOOP(MACRO, 0, ARG)

#define __ARR(I, J, _)         x##I##J,
#define __MARK(I, J, _)        item (FEAT_TRAINS, x##I##J, I + J) {}
#define WAGONS_ARRAY()         [ BIGLOOP(__ARR, 0) ]
#define MARK_WAGONS_TO_SORT()  BIGLOOP(__MARK, 0)

#define APPLY_TO_ALL_RAILS(NMLID, INGAMEID, PROPERTIES) \
item (FEAT_TRAINS, rail_##NMLID, INGAMEID) {            \
  property PROPERTIES                                   \
}                                                       \
                                                        \
item (FEAT_TRAINS, monorail_##NMLID, INGAMEID + 30) {   \
  property PROPERTIES                                   \
}                                                       \
                                                        \
item (FEAT_TRAINS, maglev_##NMLID, INGAMEID + 62) {     \
  property PROPERTIES                                   \
}

#define DISABLE_ON_ALL_RAILS(INGAMEID)    \
disable_item(FEAT_TRAINS, INGAMEID);      \
disable_item(FEAT_TRAINS, INGAMEID + 30); \
disable_item(FEAT_TRAINS, INGAMEID + 62); \

#define __BOOL(N, FLAG, NAME, DESC, DEF_VALUE) \
param N {                                      \
  FLAG {                                       \
    name: string(STR_PARAM_NAME_##NAME);       \
    desc: string(STR_PARAM_DESC_##DESC);       \
    type: bool;                                \
    bit: 0;                                    \
    def_value: DEF_VALUE;                      \
  }                                            \
}

#define BOOL(N, FLAG, NAME, DEF_VALUE) \
  __BOOL(N, FLAG, NAME, NAME, DEF_VALUE)

grf {
  grfid: "\01\16M\00";
  name: string(STR_GRF_NAME);
  desc: string(STR_GRF_DESC);
  url: string(STR_GRF_URL);
  version: 1;
  min_compatible_version: 0;

  BOOL(0, isBugFixOn, BUGFIX, 1)

  param 1 {
    isFoodAndFruitSeparate {
      name: string(STR_PARAM_NAME_SEPARATE);
      desc: string(STR_PARAM_DESC_SEPARATE);
      type: int;
      min_value: 0;
      max_value: 2;
      def_value: 1;
      names: {
        0: string(STR_PARAM_REEFER_DEFAULT);
        1: string(STR_PARAM_SEPARATE);
        2: string(STR_PARAM_SINGLE_WAGON);
      };
    }
  }

  BOOL(2, isRenameOn, RENAME, 0)
}

if (grf_future_status("OG+1")) {
  error(ERROR, string(STR_ERR_OGPT));
}

if (climate != CLIMATE_TOYLAND) {
  if (isBugFixOn) {
    if (climate == CLIMATE_TEMPERATE) {
      APPLY_TO_ALL_RAILS(food, 38, {
        climates_available: ALL_CLIMATES;
        default_cargo_type: 0x0B;
      })

      APPLY_TO_ALL_RAILS(fruit, 42, {
        climates_available: ALL_CLIMATES;
        default_cargo_type: 0x0E;
      })
    } else {
      if (climate == CLIMATE_ARCTIC) {
        APPLY_TO_ALL_RAILS(coal, 29, {
          refittable_cargo_classes: bitmask(CC_BULK);
          cargo_disallow_refit:     [ 0x06 ];
        })
      } else {
        APPLY_TO_ALL_RAILS(copper, 40, {
          refittable_cargo_classes: bitmask(CC_BULK);
          cargo_disallow_refit:     [ 0x06 ];
        })
      }

      APPLY_TO_ALL_RAILS(grain, 33, {
        default_cargo_type: 0x06;
      })
    }
  }

  if (climate == CLIMATE_ARCTIC && isFoodAndFruitSeparate == 1) {
    APPLY_TO_ALL_RAILS(food, 38, {
      cargo_disallow_refit: [ 0x0E ];
    })

    APPLY_TO_ALL_RAILS(fruit, 42, {
      climates_available: ALL_CLIMATES;
      default_cargo_type: 0x0E;
    })
  } else if (climate != CLIMATE_ARCTIC && isFoodAndFruitSeparate == 2) {
    APPLY_TO_ALL_RAILS(food, 38, {
      refittable_cargo_classes: bitmask(CC_REFRIGERATED);
    })

    // disable fruit wagons
    DISABLE_ON_ALL_RAILS(42)
  }

  if (isRenameOn) {
    APPLY_TO_ALL_RAILS(food, 38, {
      name: string(STR_WAGON_NAME_REFRIGERATOR_VAN);
    })
  }

  MARK_WAGONS_TO_SORT()
  sort(FEAT_TRAINS, WAGONS_ARRAY());
}
